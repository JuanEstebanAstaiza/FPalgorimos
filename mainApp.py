import mysql.connector  # Importa el conector de MySQL para interactuar con bases de datos MySQL
import requests  # Importa la biblioteca Requests para realizar solicitudes HTTP en Python
import time  # Importamos el m√≥dulo time para medir tiempos de ejecuci√≥n
import matplotlib.pyplot as plt # Importamos matplotlib.pyplot para crear gr√°ficos

# Configuraci√≥n de la base de datos
CONFIG_BD = {
    "host": "localhost",
    "user": "root",
    "password": "root",
    "database": "articleservice"
}

TABLAS = {
    "articulos": {
        "id": "INT AUTO_INCREMENT PRIMARY KEY",
        "nombre_base_datos": "VARCHAR(20) NOT NULL",
        "autores": "VARCHAR(255)",
        "fecha_publicacion": "DATE",
        "titulo": "VARCHAR(255) NOT NULL UNIQUE",
        "enlace": "VARCHAR(255)"
    },
    "articulos_repetidos": {
        "id": "INT AUTO_INCREMENT PRIMARY KEY",
        "nombre_base_datos": "VARCHAR(20) NOT NULL",
        "autores": "VARCHAR(255)",
        "fecha_publicacion": "DATE",
        "titulo": "VARCHAR(255) NOT NULL",
        "enlace": "VARCHAR(255)"
    }
}

# Configuraci√≥n de APIs
API_KEY_SCOPUS = "70c102fffa4eee4b0b2d1700b3a279ff"
BASE_URL_SCOPUS = "https://api.elsevier.com/content/search/scopus"


def conectar_base_datos():
    """Conecta con la base de datos y la crea si no existe."""
    print("üîÑ Conectando a la base de datos...")
    conexion = mysql.connector.connect(**CONFIG_BD)
    print("‚úÖ Conexi√≥n establecida con la base de datos.")
    return conexion


def crear_tablas():
    """Crea las tablas definidas en la configuraci√≥n si no existen."""
    print("üìå Verificando y creando tablas si es necesario...")
    conexion = conectar_base_datos()
    cursor = conexion.cursor()
    for tabla, campos in TABLAS.items():
        columnas = ", ".join(f"{col} {tipo}" for col, tipo in campos.items())
        cursor.execute(f"CREATE TABLE IF NOT EXISTS {tabla} ({columnas})")
        print(f"‚úÖ Tabla '{tabla}' verificada/creada correctamente.")
    conexion.commit()
    cursor.close()
    conexion.close()


def eliminar_tablas():
    """Elimina las tablas de la base de datos si existen."""
    conexion = conectar_base_datos()
    if conexion is None:
        return
    cursor = conexion.cursor()

    for tabla in TABLAS.keys():
        try:
            cursor.execute(f"DROP TABLE IF EXISTS {tabla}")
            print(f"üóëÔ∏è Tabla '{tabla}' eliminada correctamente.")
        except mysql.connector.Error as error:
            print(f"‚ùå Error al eliminar la tabla '{tabla}': {error}")

    conexion.commit()
    cursor.close()
    conexion.close()
    print("‚úÖ Todas las tablas han sido eliminadas.")


def articulo_existe(cursor, titulo):
    """Verifica si un art√≠culo ya existe en la base de datos usando EXISTS."""
    cursor.execute("SELECT EXISTS(SELECT 1 FROM articulos WHERE titulo = %s)", (titulo,))
    return cursor.fetchone()[0] == 1


def guardar_articulos(articulos):
    """Guarda una lista de art√≠culos en la base de datos, indicando cada inserci√≥n."""
    if not articulos:
        print("‚ö†Ô∏è No hay art√≠culos para guardar.")
        return

    conexion = conectar_base_datos()
    cursor = conexion.cursor()
    articulos_nuevos, articulos_repetidos = [], []

    for articulo in articulos:
        if articulo_existe(cursor, articulo[3]):  # 3 = t√≠tulo
            articulos_repetidos.append(articulo)
        else:
            articulos_nuevos.append(articulo)

    for tabla, lista in [("articulos", articulos_nuevos), ("articulos_repetidos", articulos_repetidos)]:
        if lista:
            cursor.executemany(f"""
                INSERT INTO {tabla} (nombre_base_datos, autores, fecha_publicacion, titulo, enlace)
                VALUES (%s, %s, %s, %s, %s)
            """, lista)
            for articulo in lista:
                print(f"üìù Guardado en '{tabla}': {articulo[3]}")
            print(f"‚úÖ Se guardaron {len(lista)} art√≠culos en '{tabla}'.")

    conexion.commit()
    cursor.close()
    conexion.close()


def listar_tabla(nombre_tabla):
    """Lista los art√≠culos de una tabla con mayor detalle."""
    conexion = conectar_base_datos()
    cursor = conexion.cursor(dictionary=True)
    cursor.execute(f"SELECT * FROM {nombre_tabla} ORDER BY fecha_publicacion DESC")
    articulos = cursor.fetchall()

    if not articulos:
        print(f"‚ö†Ô∏è No hay art√≠culos en '{nombre_tabla}'.")
    else:
        print(f"\nüìú Lista de {nombre_tabla}:")
        for articulo in articulos:
            print(f"[{articulo['fecha_publicacion']}] {articulo['titulo']} - {articulo['autores']}")

    cursor.close()
    conexion.close()


def obtener_articulos_scopus(consulta="Human Computer Interaction", max_resultados=100):
    """Obtiene art√≠culos de Scopus y los almacena en la base de datos con retroalimentaci√≥n detallada."""
    print("üîé Buscando art√≠culos en Scopus...")
    articulos_guardados = 0
    indice_inicio = 0
    articulos_batch = []

    while articulos_guardados < max_resultados:
        respuesta = requests.get(BASE_URL_SCOPUS, params={
            "query": consulta, "apiKey": API_KEY_SCOPUS, "count": 25, "start": indice_inicio
        }, headers={"X-ELS-APIKey": API_KEY_SCOPUS, "Accept": "application/json"})

        if respuesta.status_code != 200:
            print("‚ùå Error en la solicitud:", respuesta.json())
            break

        articulos = respuesta.json().get("search-results", {}).get("entry", [])
        if not articulos:
            print("‚ö†Ô∏è No se encontraron m√°s art√≠culos en Scopus.")
            break

        for articulo in articulos:
            titulo = articulo.get("dc:title", "Sin t√≠tulo")
            enlace = articulo.get("link", [{}])[0].get("@href", "Sin enlace")
            fecha_publicacion = articulo.get("prism:coverDate", "0000-00-00")
            autores = articulo.get("dc:creator", "Desconocido")
            autores_lista = ", ".join(autores) if isinstance(autores, list) else autores

            print(f"üìÑ Encontrado: {titulo} ({fecha_publicacion})")
            articulos_batch.append(("Scopus", autores_lista, fecha_publicacion, titulo, enlace))
            articulos_guardados += 1

            if articulos_guardados >= max_resultados:
                break

        indice_inicio += 25

    guardar_articulos(articulos_batch)
    print(f"‚úÖ Se guardaron {articulos_guardados} art√≠culos de Scopus.")


def listar_articulos_ordenados(criterio="fecha_desc"):
    """
    Lista los art√≠culos almacenados en la base de datos seg√∫n el criterio seleccionado.

    Criterios disponibles:
    - "fecha_desc": Ordenados por fecha de publicaci√≥n (m√°s recientes primero).
    - "fecha_asc": Ordenados por fecha de publicaci√≥n (m√°s antiguos primero).
    - "titulo_asc": Ordenados alfab√©ticamente por t√≠tulo (A-Z).
    - "titulo_desc": Ordenados alfab√©ticamente por t√≠tulo (Z-A).
    - "autor_asc": Ordenados alfab√©ticamente por autores (A-Z).
    - "autor_desc": Ordenados alfab√©ticamente por autores (Z-A).
    - "nombre_base_datos": Ordenados por la base de datos de origen.

    :param criterio: Criterio de ordenamiento (default: "fecha_desc").
    """
    conexion = conectar_base_datos()
    if conexion is None:
        return

    # Diccionario con los criterios de ordenamiento disponibles
    criterios_orden = {
        "fecha_desc": "fecha_publicacion DESC",
        "fecha_asc": "fecha_publicacion ASC",
        "titulo_asc": "titulo ASC",
        "titulo_desc": "titulo DESC",
        "autor_asc": "autores ASC",
        "autor_desc": "autores DESC",
        "nombre_base_datos": "nombre_base_datos ASC"
    }

    # Verificar si el criterio solicitado existe
    if criterio not in criterios_orden:
        print(f"‚ö†Ô∏è Criterio '{criterio}' no v√°lido. Usando 'fecha_desc' por defecto.")
        criterio = "fecha_desc"

    cursor = conexion.cursor(dictionary=True)
    cursor.execute(f"SELECT * FROM articulos ORDER BY {criterios_orden[criterio]}")
    articulos = cursor.fetchall()

    if not articulos:
        print("‚ö†Ô∏è No hay art√≠culos registrados.")
    else:
        print(f"\nüìú Lista de art√≠culos ordenados por {criterio.replace('_', ' ')}:")
        for articulo in articulos:
            print(
                f"[{articulo['fecha_publicacion']}] {articulo['titulo']} - {articulo['autores']} ({articulo['nombre_base_datos']})")

    cursor.close()
    conexion.close()

#metodos de ordenamiento (por ejemplo, timsort, quicksort, etc.)
def ejecutar_todos_los_metodos():
    """
    Funci√≥n principal que se encarga de conectar a la base de datos,
    obtener los art√≠culos almacenados y ejecutar todos los m√©todos de ordenamiento
    disponibles sobre los art√≠culos.
    Para cada uno de los m√©todos de ordenamiento, se mide el tiempo de ejecuci√≥n
    y se muestra el resultado por consola.

    Pasos realizados:
    1. Conectar a la base de datos y obtener los art√≠culos.
    2. Definir los m√©todos de ordenamiento disponibles.
    3. Ejecutar cada m√©todo de ordenamiento con las diferentes claves.
    4. Medir y mostrar el tiempo que tarda cada m√©todo.
    5. Crear gr√°ficos con los tiempos de ejecuci√≥n de los m√©todos.
    """

    # Establecer conexi√≥n con la base de datos
    conexion = conectar_base_datos()

    # Verificar si la conexi√≥n es exitosa
    if conexion is None:
        print("‚ùå No se pudo conectar a la base de datos.")
        return

    # Crear un cursor para ejecutar la consulta en la base de datos
    cursor_bd = conexion.cursor(dictionary=True)

    # Ejecutar la consulta SQL para obtener todos los art√≠culos
    cursor_bd.execute("SELECT id, nombreBD, authors, publication_date, title, link FROM articles")

    # Obtener todos los art√≠culos
    articulos = cursor_bd.fetchall()

    # Cerrar el cursor y la conexi√≥n con la base de datos
    cursor_bd.close()
    conexion.close()

    # Verificar si se han obtenido art√≠culos
    if not articulos:
        print("‚ö†Ô∏è No hay art√≠culos almacenados en la base de datos.")
        return

    # Definir los m√©todos de ordenamiento disponibles en un diccionario
    metodos_ordenamiento = {
        "TimSort": timsort,
        "Comb Sort": comb_sort,
        "Selection Sort": selection_sort,
        "Tree Sort": tree_sort,
        "Pigeonhole Sort": pigeonhole_sort,
        "Bucket Sort": bucket_sort,
        "QuickSort": quicksort,
        "HeapSort": heapsort,
        "Bitonic Sort": bitonic_sort,
        "Gnome Sort": gnome_sort,
        "Binary Insertion Sort": binary_insertion_sort,
        "Radix Sort": radix_sort
    }

    # Lista de claves por las cuales se quiere ordenar los art√≠culos
    claves = ["title", "publication_date", "nombreBD", "authors", "id", "link"]

    # Diccionario para almacenar los tiempos de ejecuci√≥n de cada m√©todo por clave
    tiempos_metodos_por_clave = {clave: [] for clave in claves}
    fallos_por_clave = {clave: [] for clave in claves}  # Almacena los fallos por clave

    # Lista para almacenar las figuras
    figuras = []

    # Recorrer todas las claves para ordenar los art√≠culos por cada una
    for clave in claves:
        print(f"\nüîπ Ordenando por: {clave}")

        # Recorrer todos los m√©todos de ordenamiento definidos
        for nombre_metodo, metodo in metodos_ordenamiento.items():
            try:
                # Medir el tiempo de ejecuci√≥n del m√©todo de ordenamiento
                tiempo_inicio = time.time()

                # Ejecutar el m√©todo de ordenamiento correspondiente
                articulos_ordenados = metodo(articulos, clave)

                # Calcular el tiempo que ha tardado en ordenar y convertir a milisegundos
                tiempo_transcurrido = (time.time() - tiempo_inicio) * 1000

                # Guardar el tiempo de ejecuci√≥n con el nombre del m√©todo y el tiempo
                tiempos_metodos_por_clave[clave].append((f"{nombre_metodo} ({tiempo_transcurrido:.2f} ms)", tiempo_transcurrido))

                # Mostrar el tiempo de ejecuci√≥n en consola en milisegundos con 2 decimales
                print(f"‚úÖ {nombre_metodo} completado en {tiempo_transcurrido:.2f} milisegundos.")
            except Exception as e:
                # En caso de error, registrar el fallo con su raz√≥n
                fallos_por_clave[clave].append((nombre_metodo, str(e)))
                print(f"‚ùå Error con el m√©todo {nombre_metodo} al ordenar por {clave}: {str(e)}")
                continue  # Contin√∫a con el siguiente m√©todo de ordenamiento

        # Almacenar los fallos para la clave actual
        if fallos_por_clave[clave]:
            texto_fallidos = f"M√©todos que no funcionaron al ordenar por '{clave}':\n\n"
            for metodo, razon in fallos_por_clave[clave]:
                texto_fallidos += f"‚Ä¢ {metodo} - Raz√≥n: {razon}\n"  # Usamos '‚Ä¢' en lugar de üîπ

            # Crear la figura para los fallos y almacenarla en la lista
            fig, ax = plt.subplots(figsize=(11, 6)) #1100 x 600
            ax.text(0.1, 0.9, texto_fallidos, fontsize=12, wrap=True, ha='left', va='top', color='black')
            ax.axis('off')  # Ocultar los ejes
            ax.set_title(f"M√©todos de Ordenamiento que no Funcionaron por la clave '{clave}'")
            figuras.append(fig)  # Agregar la figura a la lista

    # Crear gr√°ficos de barras con los tiempos de ejecuci√≥n
    for clave, tiempos in tiempos_metodos_por_clave.items():
        # Extraer los nombres de los m√©todos con sus tiempos y los tiempos
        metodos = [metodo for metodo, _ in tiempos]
        tiempos_values = [tiempo for _, tiempo in tiempos]

        # Crear la gr√°fica de barras 2000 x 600
        fig, ax = plt.subplots(figsize=(20, 6))
        ax.barh(metodos, tiempos_values, color='skyblue')
        ax.set_xlabel("Tiempo de ejecuci√≥n (milisegundos)")
        ax.set_title(f"Tiempo de los m√©todos de ordenamiento seg√∫n la clave '{clave}'")
        figuras.append(fig)  # Agregar la figura a la lista

    # Mostrar todas las figuras al final
    plt.show()

def timsort(lista, clave):
    """
    Implementaci√≥n manual de TimSort.

    TimSort combina los algoritmos MergeSort e InsertionSort para ofrecer un rendimiento √≥ptimo
    tanto en listas grandes como peque√±as. Esta implementaci√≥n es completamente manual, sin el uso
    de funciones integradas como sorted().

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.
                 Puede ser cualquier atributo de los elementos de la lista (por ejemplo, 'title', 'authors', etc.).

    Retorna:
    list: Una nueva lista ordenada seg√∫n la clave especificada.
    """

    # Paso 1: Implementar el algoritmo de Insertion Sort
    def insertion_sort(sublista, clave):
        for i in range(1, len(sublista)):
            elemento_actual = sublista[i]
            j = i - 1
            # Desplazar elementos que son mayores que el actual
            while j >= 0 and sublista[j][clave] > elemento_actual[clave]:
                sublista[j + 1] = sublista[j]
                j -= 1
            sublista[j + 1] = elemento_actual
        return sublista

    # Paso 2: Implementar el algoritmo de Merge Sort
    def merge_sort(sublista, clave):
        if len(sublista) <= 1:
            return sublista
        medio = len(sublista) // 2
        izquierda = merge_sort(sublista[:medio], clave)
        derecha = merge_sort(sublista[medio:], clave)
        return merge(izquierda, derecha, clave)

    # Paso 3: Fusionar las dos sublistas ordenadas
    def merge(izquierda, derecha, clave):
        result = []
        i = j = 0
        # Comparar los elementos y combinarlos en orden
        while i < len(izquierda) and j < len(derecha):
            if izquierda[i][clave] <= derecha[j][clave]:
                result.append(izquierda[i])
                i += 1
            else:
                result.append(derecha[j])
                j += 1
        # Agregar los elementos restantes
        result.extend(izquierda[i:])
        result.extend(derecha[j:])
        return result

    # Paso 4: Dividir la lista en "run" (sublistas peque√±as)
    min_run = 32  # Tama√±o m√≠nimo de la sublista para aplicar Insertion Sort
    for i in range(0, len(lista), min_run):
        lista[i:i + min_run] = insertion_sort(lista[i:i + min_run], clave)

    # Paso 5: Combinar las sublistas ordenadas usando Merge Sort
    lista = merge_sort(lista, clave)

    return lista

def comb_sort(lista, clave):
    """
    Implementaci√≥n manual de Comb Sort.

    Comb Sort es una mejora del algoritmo Bubble Sort, que reduce el n√∫mero de comparaciones
    y movimientos al utilizar un "factor de reducci√≥n" (gap). El gap comienza siendo grande
    y se va reduciendo a medida que el algoritmo avanza.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.
                 Puede ser cualquier atributo de los elementos de la lista (por ejemplo, 'title', 'authors', etc.).

    Retorna:
    list: Una nueva lista ordenada seg√∫n la clave especificada.
    """

    # Paso 1: Inicializar el "gap" y el factor de reducci√≥n
    gap = len(lista)
    factor_reduccion = 1.3  # Factor de reducci√≥n recomendado para el gap

    # Paso 2: Iterar hasta que el gap sea menor que 1
    while gap > 1:
        # Reducir el gap
        gap = int(gap / factor_reduccion)

        # Iterar sobre la lista para comparar elementos a una distancia igual al gap
        for i in range(len(lista) - gap):
            # Comparar los elementos a distancia 'gap' y hacer el intercambio si es necesario
            if lista[i][clave] > lista[i + gap][clave]:
                # Intercambiar los elementos
                lista[i], lista[i + gap] = lista[i + gap], lista[i]

    # Paso 3: Aplicar una √∫ltima pasada para asegurar que la lista est√© completamente ordenada
    for i in range(1, len(lista)):
        if lista[i - 1][clave] > lista[i][clave]:
            lista[i - 1], lista[i] = lista[i], lista[i - 1]

    return lista

def selection_sort(lista, clave):
    """
    Implementaci√≥n manual de Selection Sort.

    Selection Sort es un algoritmo de ordenaci√≥n basado en la selecci√≥n del elemento m√°s peque√±o
    de la lista y su intercambio con el primer elemento no ordenado.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.
                 Puede ser cualquier atributo de los elementos de la lista (por ejemplo, 'title', 'authors', etc.).

    Retorna:
    list: Una nueva lista ordenada seg√∫n la clave especificada.
    """

    # Paso 1: Iterar sobre la lista de elementos
    for i in range(len(lista)):
        # Paso 2: Suponer que el elemento actual es el m√°s peque√±o
        indice_minimo = i

        # Paso 3: Buscar el elemento m√°s peque√±o en el resto de la lista
        for j in range(i + 1, len(lista)):
            if lista[j][clave] < lista[indice_minimo][clave]:
                indice_minimo = j

        # Paso 4: Intercambiar el elemento actual con el m√°s peque√±o encontrado
        if indice_minimo != i:
            lista[i], lista[indice_minimo] = lista[indice_minimo], lista[i]

    return lista


#tree sort
class Nodo:
    """
    Clase que representa un nodo en un √°rbol binario de b√∫squeda.
    Cada nodo tiene un valor y referencias a su hijo izquierdo y derecho.
    """

    def __init__(self, valor):
        self.valor = valor  # El valor del nodo, basado en la clave de ordenaci√≥n
        self.izquierda = None  # Hijo izquierdo
        self.derecha = None  # Hijo derecho
class ArbolBinarioBusqueda:
    """
    Clase que representa un √°rbol binario de b√∫squeda.
    Contiene m√©todos para insertar elementos y hacer un recorrido en orden.
    """

    def __init__(self):
        self.raiz = None  # La ra√≠z del √°rbol es inicialmente nula

    def insertar(self, valor):
        """
        Inserta un nuevo valor en el √°rbol binario de b√∫squeda.
        """
        if self.raiz is None:
            self.raiz = Nodo(valor)
        else:
            self._insertar_en_nodo(self.raiz, valor)

    def _insertar_en_nodo(self, nodo, valor):
        """
        M√©todo auxiliar recursivo para insertar en el nodo adecuado.
        """
        if valor < nodo.valor:
            if nodo.izquierda is None:
                nodo.izquierda = Nodo(valor)
            else:
                self._insertar_en_nodo(nodo.izquierda, valor)
        else:
            if nodo.derecha is None:
                nodo.derecha = Nodo(valor)
            else:
                self._insertar_en_nodo(nodo.derecha, valor)

    def recorrido_en_orden(self):
        """
        Realiza un recorrido en orden del √°rbol binario de b√∫squeda.
        Devuelve una lista con los valores ordenados.
        """
        resultado = []
        self._recorrido_en_orden(self.raiz, resultado)
        return resultado

    def _recorrido_en_orden(self, nodo, resultado):
        """
        M√©todo auxiliar recursivo para hacer el recorrido en orden.
        """
        if nodo:
            self._recorrido_en_orden(nodo.izquierda, resultado)  # Primero recorremos la sub-√°rbol izquierdo
            resultado.append(nodo.valor)  # Luego procesamos el valor del nodo
            self._recorrido_en_orden(nodo.derecha, resultado)  # Finalmente, recorremos la sub-√°rbol derecho
def tree_sort(lista, clave):
    """
    Implementaci√≥n manual de Tree Sort.

    Tree Sort construye un √°rbol binario de b√∫squeda y luego realiza un recorrido en orden para ordenar los elementos.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.

    Retorna:
    list: Una nueva lista ordenada seg√∫n la clave especificada.
    """
    arbol = ArbolBinarioBusqueda()

    # Insertamos los valores de la lista en el √°rbol
    for elemento in lista:
        arbol.insertar(elemento[clave])

    # Obtenemos los valores ordenados mediante un recorrido en orden
    lista_ordenada = arbol.recorrido_en_orden()

    # Creamos una nueva lista con los elementos ordenados por la clave
    lista_resultado = []
    for valor in lista_ordenada:
        for item in lista:
            if item[clave] == valor:
                lista_resultado.append(item)
                break

    return lista_resultado


def pigeonhole_sort(lista, clave):
    """
    Implementaci√≥n de Pigeonhole Sort de manera manual.

    Pigeonhole Sort distribuye los elementos en "agujeros" (pigeonholes) basados en el valor del elemento.
    Luego recoge los elementos de los agujeros para colocarlos en orden.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.

    Retorna:
    list: Una nueva lista ordenada seg√∫n la clave especificada.
    """

    if not lista:
        return lista  # Si la lista est√° vac√≠a, retornamos la lista vac√≠a

    # Determinamos el rango de los valores
    minimo = min(lista, key=lambda x: x[clave])[clave]
    maximo = max(lista, key=lambda x: x[clave])[clave]

    # N√∫mero de agujeros (rangos de valores posibles)
    rango = maximo - minimo + 1

    # Crear los agujeros (vac√≠os al principio)
    agujeros = [[] for _ in range(rango)]

    # Distribuir los elementos en los agujeros seg√∫n su valor
    for elemento in lista:
        indice = elemento[clave] - minimo
        agujeros[indice].append(elemento)

    # Recoger los elementos de los agujeros en orden
    lista_ordenada = []
    for agujero in agujeros:
        lista_ordenada.extend(agujero)

    return lista_ordenada

#bucket sort
def bucket_sort(lista, clave):
    """
    Implementaci√≥n de Bucket Sort de manera manual.

    Bucket Sort distribuye los elementos en cubos (buckets) y luego los ordena por separado.
    Los cubos se ordenan utilizando un algoritmo de ordenaci√≥n simple (como Insertion Sort),
    y finalmente los cubos ordenados se concatenan para formar la lista ordenada.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.

    Retorna:
    list: Una nueva lista ordenada seg√∫n la clave especificada.
    """

    if not lista:
        return lista  # Si la lista est√° vac√≠a, retornamos la lista vac√≠a

    # Determinamos el valor m√≠nimo y m√°ximo en la lista
    minimo = min(lista, key=lambda x: x[clave])[clave]
    maximo = max(lista, key=lambda x: x[clave])[clave]

    # Creamos los cubos (buckets)
    numero_de_buckets = len(lista)
    rango = maximo - minimo + 1
    tamano_bucket = rango / numero_de_buckets

    # Inicializamos los cubos vac√≠os
    cubos = [[] for _ in range(numero_de_buckets)]

    # Distribuir los elementos en los cubos
    for elemento in lista:
        indice = int((elemento[clave] - minimo) / tamano_bucket)
        if indice == numero_de_buckets:  # Para el valor m√°ximo, debe ir en el √∫ltimo cubo
            indice -= 1
        cubos[indice].append(elemento)

    # Ordenar los cubos individualmente
    for i in range(numero_de_buckets):
        cubos[i] = insertion_sort(cubos[i], clave)

    # Concatenar los cubos ordenados
    lista_ordenada = []
    for cubo in cubos:
        lista_ordenada.extend(cubo)

    return lista_ordenada
def insertion_sort(lista, clave):
    """
    Implementaci√≥n de Insertion Sort de manera manual.

    Insertion Sort es un algoritmo de ordenaci√≥n simple que construye la lista ordenada
    al insertar elementos en su lugar correcto uno por uno.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.

    Retorna:
    list: Una lista ordenada seg√∫n la clave especificada.
    """
    for i in range(1, len(lista)):
        clave_elemento = lista[i]
        j = i - 1
        while j >= 0 and clave_elemento[clave] < lista[j][clave]:
            lista[j + 1] = lista[j]
            j -= 1
        lista[j + 1] = clave_elemento
    return lista


def quicksort(lista, clave):
    """
    Implementaci√≥n de QuickSort de manera manual.

    QuickSort es un algoritmo de ordenaci√≥n que utiliza el enfoque de divide y vencer√°s.
    Selecciona un elemento como pivote, divide la lista en dos sublistas con elementos menores
    y mayores que el pivote, y luego ordena recursivamente esas sublistas.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.

    Retorna:
    list: Una nueva lista ordenada seg√∫n la clave especificada.
    """
    if len(lista) <= 1:
        return lista

    # Elegimos el pivote (en este caso, el primer elemento)
    pivote = lista[0]

    # Sublistas para elementos menores y mayores que el pivote
    menores = []
    mayores = []

    # Particionar los elementos
    for elemento in lista[1:]:
        if elemento[clave] < pivote[clave]:
            menores.append(elemento)
        else:
            mayores.append(elemento)

    # Ordenar recursivamente las sublistas y concatenar el pivote
    return quicksort(menores, clave) + [pivote] + quicksort(mayores, clave)

#heap sort
def heapify(lista, n, i, clave):
    """
    Funci√≥n que convierte una sublista en un max-heap (mont√≠culo).

    Par√°metros:
    lista (list): Lista de elementos a organizar como un heap.
    n (int): El tama√±o de la lista.
    i (int): El √≠ndice del nodo actual.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.
    """
    # Inicializar el √≠ndice del nodo m√°s grande como el nodo actual
    nodo_mayor = i
    izquierda = 2 * i + 1  # √çndice del hijo izquierdo
    derecha = 2 * i + 2  # √çndice del hijo derecho

    # Verificar si el hijo izquierdo es mayor que el nodo actual
    if izquierda < n and lista[izquierda][clave] > lista[nodo_mayor][clave]:
        nodo_mayor = izquierda

    # Verificar si el hijo derecho es mayor que el nodo actual
    if derecha < n and lista[derecha][clave] > lista[nodo_mayor][clave]:
        nodo_mayor = derecha

    # Si el nodo m√°s grande no es el nodo actual, intercambiamos y aplicamos heapify recursivo
    if nodo_mayor != i:
        lista[i], lista[nodo_mayor] = lista[nodo_mayor], lista[i]
        heapify(lista, n, nodo_mayor, clave)
def heapsort(lista, clave):
    """
    Implementaci√≥n de HeapSort de manera manual.

    HeapSort convierte la lista en un heap (mont√≠culo), luego intercambia el primer
    elemento del heap con el √∫ltimo y reduce el tama√±o del heap. Repite el proceso
    hasta que la lista est√© ordenada.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.

    Retorna:
    list: Una nueva lista ordenada seg√∫n la clave especificada.
    """
    n = len(lista)

    # Construir el heap (mont√≠culo) de manera descendente
    for i in range(n // 2 - 1, -1, -1):
        heapify(lista, n, i, clave)

    # Extraer los elementos del heap uno por uno
    for i in range(n - 1, 0, -1):
        # Intercambiar el primer elemento (el mayor) con el √∫ltimo
        lista[i], lista[0] = lista[0], lista[i]

        # Aplicar heapify en el resto de la lista
        heapify(lista, i, 0, clave)

    return lista

#bitonic sort
def comparar_e_intercambiar(lista, i, j, direccion, clave):
    """
    Compara los elementos en las posiciones i y j de la lista y los intercambia
    si est√°n en el orden incorrecto seg√∫n la direcci√≥n indicada.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    i (int): √çndice del primer elemento a comparar.
    j (int): √çndice del segundo elemento a comparar.
    direccion (bool): Si es True, se ordena de manera ascendente, si es False, descendente.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.
    """
    if (direccion and lista[i][clave] > lista[j][clave]) or (not direccion and lista[i][clave] < lista[j][clave]):
        lista[i], lista[j] = lista[j], lista[i]
def bitonic_merge(lista, lo, n, direccion, clave):
    """
    Funci√≥n recursiva para mezclar una secuencia bit√≥nica.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    lo (int): El √≠ndice inicial de la secuencia bit√≥nica.
    n (int): El tama√±o de la secuencia bit√≥nica.
    direccion (bool): Si es True, se ordena de manera ascendente, si es False, descendente.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.
    """
    if n > 1:
        k = n // 2
        for i in range(lo, lo + k):
            comparar_e_intercambiar(lista, i, i + k, direccion, clave)
        bitonic_merge(lista, lo, k, direccion, clave)
        bitonic_merge(lista, lo + k, k, direccion, clave)
def bitonic_sort_recursivo(lista, lo, n, direccion, clave):
    """
    Funci√≥n recursiva que ordena una secuencia bit√≥nica dividi√©ndola en dos partes,
    ordenando cada una de ellas y luego combin√°ndolas utilizando bitonic_merge.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    lo (int): El √≠ndice inicial de la secuencia bit√≥nica.
    n (int): El tama√±o de la secuencia bit√≥nica.
    direccion (bool): Si es True, se ordena de manera ascendente, si es False, descendente.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.
    """
    if n > 1:
        k = n // 2
        bitonic_sort_recursivo(lista, lo, k, True, clave)  # Ordena de forma ascendente
        bitonic_sort_recursivo(lista, lo + k, k, False, clave)  # Ordena de forma descendente
        bitonic_merge(lista, lo, n, direccion, clave)
def bitonic_sort(lista, clave):
    """
    Implementaci√≥n de BitonicSort de manera manual.

    BitonicSort ordena una lista dividi√©ndola recursivamente en secuencias bit√≥nicas,
    luego las mezcla utilizando la funci√≥n bitonic_merge para obtener la lista ordenada.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.

    Retorna:
    list: Una nueva lista ordenada seg√∫n la clave especificada.
    """
    bitonic_sort_recursivo(lista, 0, len(lista), True, clave)
    return lista


def gnome_sort(lista, clave):
    """
    Implementaci√≥n manual de GnomeSort.

    GnomeSort es un algoritmo de ordenaci√≥n basado en la idea de un "gnomo" que recorre
    la lista de izquierda a derecha. Si encuentra un par de elementos en el orden incorrecto,
    los intercambia y retrocede una posici√≥n. Si no, avanza a la siguiente posici√≥n.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.

    Retorna:
    list: Una nueva lista ordenada seg√∫n la clave especificada.
    """
    indice = 0
    while indice < len(lista):
        if indice == 0:
            indice += 1
        if lista[indice][clave] >= lista[indice - 1][clave]:
            indice += 1
        else:
            # Intercambio los elementos si est√°n en orden incorrecto
            lista[indice], lista[indice - 1] = lista[indice - 1], lista[indice]
            indice -= 1
    return lista

#binary search
def busqueda_binaria(lista, clave, inicio, fin):
    """
    Realiza una b√∫squeda binaria para encontrar la posici√≥n donde debe insertarse el elemento.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.
    inicio (int): El √≠ndice inicial para la b√∫squeda.
    fin (int): El √≠ndice final para la b√∫squeda.

    Retorna:
    int: El √≠ndice donde debe insertarse el elemento.
    """
    while inicio < fin:
        medio = (inicio + fin) // 2
        if lista[medio][clave] < lista[inicio][clave]:
            fin = medio
        else:
            inicio = medio + 1
    return inicio
def binary_insertion_sort(lista, clave):
    """
    Implementaci√≥n manual de Binary Insertion Sort.

    Binary Insertion Sort mejora el Insertion Sort usando b√∫squeda binaria para encontrar
    la posici√≥n de inserci√≥n de un elemento. A pesar de mejorar las comparaciones, la complejidad sigue siendo O(n^2).

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.

    Retorna:
    list: Una nueva lista ordenada seg√∫n la clave especificada.
    """
    for i in range(1, len(lista)):
        elemento_actual = lista[i]
        # Buscar la posici√≥n de inserci√≥n usando b√∫squeda binaria
        posicion = busqueda_binaria(lista, clave, 0, i)
        # Mover los elementos mayores a la derecha
        lista[posicion + 1:i + 1] = lista[posicion:i]
        # Insertar el elemento en la posici√≥n encontrada
        lista[posicion] = elemento_actual
    return lista

#radix
def obtener_maximo(lista, clave):
    """
    Obtiene el valor m√°ximo de la lista seg√∫n la clave para determinar el n√∫mero de d√≠gitos.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.

    Retorna:
    int: El valor m√°ximo encontrado en la lista.
    """
    maximo = lista[0][clave]
    for elemento in lista:
        if elemento[clave] > maximo:
            maximo = elemento[clave]
    return maximo
def contar_por_digito(lista, clave, exp):
    """
    Realiza una ordenaci√≥n de los elementos seg√∫n el d√≠gito en la posici√≥n exp.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.
    exp (int): El exponente que indica el d√≠gito a ordenar.

    Retorna:
    list: Una lista ordenada por el d√≠gito especificado.
    """
    conteo = [0] * 10  # Para contar la cantidad de veces que aparece cada d√≠gito (0-9)
    salida = [None] * len(lista)

    for elemento in lista:
        indice = (elemento[clave] // exp) % 10
        conteo[indice] += 1

    for i in range(1, 10):
        conteo[i] += conteo[i - 1]

    for i in range(len(lista) - 1, -1, -1):
        elemento = lista[i]
        indice = (elemento[clave] // exp) % 10
        salida[conteo[indice] - 1] = elemento
        conteo[indice] -= 1

    return salida
def radix_sort(lista, clave):
    """
    Implementaci√≥n manual de Radix Sort.

    Radix Sort ordena los elementos por sus d√≠gitos, comenzando desde el menos significativo.
    La lista se ordena de acuerdo con los valores de la clave especificada.

    Par√°metros:
    lista (list): Lista de elementos a ordenar.
    clave (str): La clave sobre la cual se ordenar√°n los elementos de la lista.

    Retorna:
    list: Una nueva lista ordenada seg√∫n la clave especificada.
    """
    maximo = obtener_maximo(lista, clave)
    exp = 1
    while maximo // exp > 0:
        lista = contar_por_digito(lista, clave, exp)
        exp *= 10
    return lista
#fin metodos ordenamiento

def iniciarApp():
    # 2Ô∏è‚É£ Crear las tablas necesarias en la base de datos si no existen
    crear_tablas()

    # 3Ô∏è‚É£ Obtener art√≠culos desde la API de Scopus y almacenarlos en la base de datos
    obtener_articulos_scopus()

    # 4Ô∏è‚É£ Listar todos los art√≠culos almacenados en la base de datos
    listar_tabla("articulos")

    # 5Ô∏è‚É£ Listar todos los art√≠culos que han sido detectados como repetidos
    listar_tabla("articulos_repetidos")

    # ejecucion diferentes metodos de ordenamiento
    ejecutar_todos_los_metodos()

    # metodo para ordenar por criterio
    # 1Ô∏è‚É£ Ordenar por fecha de publicaci√≥n (m√°s recientes primero) [DEFAULT]
    listar_articulos_ordenados("fecha_desc")

    # 2Ô∏è‚É£ Ordenar por fecha de publicaci√≥n (m√°s antiguos primero)
    listar_articulos_ordenados("fecha_asc")

    # 3Ô∏è‚É£ Ordenar por t√≠tulo en orden alfab√©tico (A-Z)
    listar_articulos_ordenados("titulo_asc")

    # 4Ô∏è‚É£ Ordenar por t√≠tulo en orden alfab√©tico inverso (Z-A)
    listar_articulos_ordenados("titulo_desc")

    # 5Ô∏è‚É£ Ordenar por nombre de autor en orden alfab√©tico (A-Z)
    listar_articulos_ordenados("autor_asc")

    # 6Ô∏è‚É£ Ordenar por nombre de autor en orden alfab√©tico inverso (Z-A)
    listar_articulos_ordenados("autor_desc")

    # 7Ô∏è‚É£ Ordenar por nombre de la base de datos de origen
    listar_articulos_ordenados("nombre_base_datos")

#main
iniciarApp()



